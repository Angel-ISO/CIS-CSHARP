// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(CisContext))]
    [Migration("20250330202215_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Idea", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("Id_Idea");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar")
                        .HasColumnName("Description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Title");

                    b.Property<byte[]>("TopicId")
                        .IsRequired()
                        .HasColumnType("binary(16)")
                        .HasColumnName("TopicId");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("binary(16)")
                        .HasColumnName("UserId");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Idea", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new byte[] { 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51 },
                            CreatedAt = new DateTime(2025, 3, 30, 20, 22, 11, 672, DateTimeKind.Utc).AddTicks(9115),
                            Description = "Discussing how caching can improve performance in CQRS systems.",
                            Title = "Implementing caching in CQRS",
                            TopicId = new byte[] { 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17 },
                            UserId = new byte[] { 129, 110, 65, 68, 0, 221, 54, 67, 132, 1, 225, 69, 124, 210, 207, 158 },
                            Username = "catriel_72"
                        },
                        new
                        {
                            Id = new byte[] { 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68 },
                            CreatedAt = new DateTime(2025, 3, 30, 20, 22, 11, 672, DateTimeKind.Utc).AddTicks(9117),
                            Description = "Exploring the usage of domain events in CQRS systems.",
                            Title = "Domain events in CQRS",
                            TopicId = new byte[] { 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17 },
                            UserId = new byte[] { 129, 110, 65, 68, 0, 221, 54, 67, 132, 1, 225, 69, 124, 210, 207, 158 },
                            Username = "catriel_72"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Topic", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("Id_Topic");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar")
                        .HasColumnName("Description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Title");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("binary(16)")
                        .HasColumnName("UserId");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.ToTable("Topic", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new byte[] { 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17 },
                            CreatedAt = new DateTime(2025, 3, 30, 20, 22, 11, 673, DateTimeKind.Utc).AddTicks(1379),
                            Description = "Discussion on implementing CQRS in a microservices architecture.",
                            Title = "How to implement CQRS",
                            UserId = new byte[] { 113, 176, 8, 226, 252, 214, 23, 65, 171, 174, 9, 61, 192, 66, 8, 100 },
                            Username = "angelito_374"
                        },
                        new
                        {
                            Id = new byte[] { 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34 },
                            CreatedAt = new DateTime(2025, 3, 30, 20, 22, 11, 673, DateTimeKind.Utc).AddTicks(1381),
                            Description = "Best practices for building clean and maintainable software architectures.",
                            Title = "Best practices for clean architecture",
                            UserId = new byte[] { 113, 176, 8, 226, 252, 214, 23, 65, 171, 174, 9, 61, 192, 66, 8, 100 },
                            Username = "angelito_374"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Vote", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("Id_Vote");

                    b.Property<byte[]>("IdeaId")
                        .IsRequired()
                        .HasColumnType("binary(16)")
                        .HasColumnName("IdeaId");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("binary(16)")
                        .HasColumnName("UserId");

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasColumnName("Value");

                    b.Property<DateTime>("VotedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("VotedAt");

                    b.HasKey("Id");

                    b.HasIndex("IdeaId");

                    b.ToTable("Vote", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new byte[] { 65, 131, 100, 214, 155, 199, 201, 67, 141, 7, 161, 6, 217, 61, 127, 136 },
                            IdeaId = new byte[] { 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51 },
                            UserId = new byte[] { 236, 60, 215, 34, 93, 60, 33, 72, 175, 106, 33, 195, 252, 53, 104, 202 },
                            Value = 1,
                            VotedAt = new DateTime(2025, 3, 30, 20, 22, 11, 673, DateTimeKind.Utc).AddTicks(4106)
                        },
                        new
                        {
                            Id = new byte[] { 210, 149, 162, 115, 240, 217, 217, 72, 135, 70, 101, 79, 10, 166, 23, 150 },
                            IdeaId = new byte[] { 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68 },
                            UserId = new byte[] { 236, 60, 215, 34, 93, 60, 33, 72, 175, 106, 33, 195, 252, 53, 104, 202 },
                            Value = -1,
                            VotedAt = new DateTime(2025, 3, 30, 20, 22, 11, 673, DateTimeKind.Utc).AddTicks(4114)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Idea", b =>
                {
                    b.HasOne("Domain.Entities.Topic", "Topic")
                        .WithMany("Ideas")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Domain.Entities.Vote", b =>
                {
                    b.HasOne("Domain.Entities.Idea", "Idea")
                        .WithMany("Votes")
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idea");
                });

            modelBuilder.Entity("Domain.Entities.Idea", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Domain.Entities.Topic", b =>
                {
                    b.Navigation("Ideas");
                });
#pragma warning restore 612, 618
        }
    }
}
